(function(a) {
    var b = new Array; // 存储分隔符配置
    var c = new Array; // 存储回调函数

    // 自动调整输入框宽度
    a.fn.doAutosize = function(b) {
        var c = a(this).data("minwidth"), // 最小宽度
            d = a(this).data("maxwidth"), // 最大宽度
            e = "",
            f = a(this),
            g = a("#" + a(this).data("tester_id")); // 测试元素

        if (e === (e = f.val())) { // 值未变化则返回
            return;
        }

        // 转义HTML字符
        var h = e.replace(/&/g, "&amp;").replace(/\s/g, "&nbsp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
        g.html(h);

        var i = g.width(), // 测试元素宽度
            j = i + b.comfortZone >= c ? i + b.comfortZone : c, // 计算新宽度
            k = f.width(), // 当前宽度
            l = j < k && j >= c || j > c && j < d; // 判断是否需要调整宽度

        if (l) {
            f.width(j);
        }
    };

    // 重置自动调整大小
    a.fn.resetAutosize = function(b) {
        var c = a(this).data("minwidth") || b.minInputWidth || a(this).width(),
            d = a(this).data("maxwidth") || b.maxInputWidth || a(this).closest(".tagsinput").width() - b.inputPadding,
            e = "",
            f = a(this),
            // 创建隐藏的测试元素
            g = a("<tester/>").css({
                position: "absolute",
                top: -9999,
                left: -9999,
                width: "auto",
                fontSize: f.css("fontSize"),
                fontFamily: f.css("fontFamily"),
                fontWeight: f.css("fontWeight"),
                letterSpacing: f.css("letterSpacing"),
                whiteSpace: "nowrap"
            }),
            h = a(this).attr("id") + "_autosize_tester";

        // 如果测试元素不存在则创建
        if (!a("#" + h).length > 0) {
            g.attr("id", h);
            g.appendTo("body");
        }

        // 存储数据
        f.data("minwidth", c);
        f.data("maxwidth", d);
        f.data("tester_id", h);
        f.css("width", c);
    };

    // 添加标签
    a.fn.addTag = function(d, e) {
        e = jQuery.extend({ focus: false, callback: true }, e);

        this.each(function() {
            var f = a(this).attr("id");
            var g = a(this).val().split(b[f]); // 分割现有标签

            if (g[0] == "") {
                g = new Array;
            }

            d = jQuery.trim(d); // 去除前后空格

            // 检查标签是否已存在
            if (e.unique) {
                var h = a(g).tagExist(d);
                if (h == true) {
                    a("#" + f + "_tag").addClass("not_valid"); // 添加无效样式
                }
            } else {
                var h = false;
            }

            // 如果标签不为空且不存在，则添加
            if (d != "" && h != true) {
                // 创建标签元素
                a("<span>")
                    .addClass("tag")
                    .append(
                        a("<span>").text(d).append("&nbsp;&nbsp;"),
                        a("<a>", {
                            href: "#",
                            title: "Removing tag",
                            text: "x"
                        }).click(function() {
                            return a("#" + f).removeTag(escape(d));
                        })
                    )
                    .insertBefore("#" + f + "_addTag");

                g.push(d); // 添加到数组
                a("#" + f + "_tag").val(""); // 清空输入框

                // 焦点处理
                if (e.focus) {
                    a("#" + f + "_tag").focus();
                } else {
                    a("#" + f + "_tag").blur();
                }

                // 更新标签字段
                a.fn.tagsInput.updateTagsField(this, g);

                // 触发回调函数
                if (e.callback && c[f] && c[f]["onAddTag"]) {
                    var i = c[f]["onAddTag"];
                    i.call(this, d);
                }

                if (c[f] && c[f]["onChange"]) {
                    var j = g.length;
                    var i = c[f]["onChange"];
                    i.call(this, a(this), g[j - 1]);
                }
            }
        });
        return false;
    };

    // 删除标签
    a.fn.removeTag = function(d) {
        d = unescape(d);

        this.each(function() {
            var e = a(this).attr("id");
            var f = a(this).val().split(b[e]); // 获取所有标签

            // 移除所有标签元素
            a("#" + e + "_tagsinput .tag").remove();

            // 重建标签字符串
            str = "";
            for (i = 0; i < f.length; i++) {
                if (f[i] != d) {
                    str = str + b[e] + f[i];
                }
            }

            // 导入剩余标签
            a.fn.tagsInput.importTags(this, str);

            // 触发删除回调
            if (c[e] && c[e]["onRemoveTag"]) {
                var g = c[e]["onRemoveTag"];
                g.call(this, d);
            }
        });
        return false;
    };

    // 检查标签是否存在
    a.fn.tagExist = function(b) {
        return jQuery.inArray(b, a(this)) >= 0;
    };

    // 导入标签
    a.fn.importTags = function(b) {
        id = a(this).attr("id");
        a("#" + id + "_tagsinput .tag").remove(); // 清除现有标签
        a.fn.tagsInput.importTags(this, b);
    };

    // 主插件函数 - 初始化标签输入
    a.fn.tagsInput = function(d) {
        // 默认配置
        var e = jQuery.extend({
            interactive: true,
            defaultText: "add a tag",
            minChars: 0,
            width: "300px",
            height: "100px",
            autocomplete: { selectFirst: false },
            hide: true,
            delimiter: ",",
            unique: true,
            removeWithBackspace: true,
            placeholderColor: "#999999",
            autosize: true,
            comfortZone: 20,
            inputPadding: 6 * 2
        }, d);

        this.each(function() {
            // 隐藏原始输入框
            if (e.hide) {
                a(this).hide();
            }

            var d = a(this).attr("id");

            // 生成唯一ID
            if (!d || b[a(this).attr("id")]) {
                d = a(this).attr("id", "tags" + (new Date).getTime()).attr("id");
            }

            // 扩展配置
            var f = jQuery.extend({
                pid: d,
                real_input: "#" + d,
                holder: "#" + d + "_tagsinput",
                input_wrapper: "#" + d + "_addTag",
                fake_input: "#" + d + "_tag"
            }, e);

            // 存储分隔符
            b[d] = f.delimiter;

            // 存储回调函数
            if (e.onAddTag || e.onRemoveTag || e.onChange) {
                c[d] = new Array;
                c[d]["onAddTag"] = e.onAddTag;
                c[d]["onRemoveTag"] = e.onRemoveTag;
                c[d]["onChange"] = e.onChange;
            }

            // 构建HTML结构
            var g = '<div id="' + d + '_tagsinput" class="tagsinput"><div id="' + d + '_addTag">';
            if (e.interactive) {
                g = g + '<input id="' + d + '_tag" value="" data-default="' + e.defaultText + '" />';
            }
            g = g + '</div><div class="tags_clear"></div></div>';

            // 插入HTML
            a(g).insertAfter(this);
            a(f.holder).css("width", e.width);
            a(f.holder).css("height", e.height);

            // 导入现有值
            if (a(f.real_input).val() != "") {
                a.fn.tagsInput.importTags(a(f.real_input), a(f.real_input).val());
            }

            // 交互功能
            if (e.interactive) {
                // 初始化输入框
                a(f.fake_input).val(a(f.fake_input).attr("data-default"));
                a(f.fake_input).css("color", e.placeholderColor);
                a(f.fake_input).resetAutosize(e);

                // 事件绑定
                a(f.holder).bind("click", f, function(b) {
                    a(b.data.fake_input).focus();
                });

                a(f.fake_input).bind("focus", f, function(b) {
                    if (a(b.data.fake_input).val() == a(b.data.fake_input).attr("data-default")) {
                        a(b.data.fake_input).val("");
                    }
                    a(b.data.fake_input).css("color", "#000000");
                });

                // 自动完成功能
                if (e.autocomplete_url != undefined) {
                    autocomplete_options = { source: e.autocomplete_url };
                    for (attrname in e.autocomplete) {
                        autocomplete_options[attrname] = e.autocomplete[attrname];
                    }

                    // 支持不同的自动完成插件
                    if (jQuery.Autocompleter !== undefined) {
                        a(f.fake_input).autocomplete(e.autocomplete_url, e.autocomplete);
                        a(f.fake_input).bind("result", f, function(b, c, f) {
                            if (c) {
                                a("#" + d).addTag(c[0] + "", { focus: true, unique: e.unique });
                            }
                        });
                    } else if (jQuery.ui.autocomplete !== undefined) {
                        a(f.fake_input).autocomplete(autocomplete_options);
                        a(f.fake_input).bind("autocompleteselect", f, function(b, c) {
                            a(b.data.real_input).addTag(c.item.value, { focus: true, unique: e.unique });
                            return false;
                        });
                    }
                } else {
                    // 失去焦点时添加标签
                    a(f.fake_input).bind("blur", f, function(b) {
                        var c = a(this).attr("data-default");
                        if (a(b.data.fake_input).val() != "" && a(b.data.fake_input).val() != c) {
                            if (b.data.minChars <= a(b.data.fake_input).val().length && (!b.data.maxChars || b.data.maxChars >= a(b.data.fake_input).val().length))
                                a(b.data.real_input).addTag(a(b.data.fake_input).val(), { focus: true, unique: e.unique });
                        } else {
                            a(b.data.fake_input).val(a(b.data.fake_input).attr("data-default"));
                            a(b.data.fake_input).css("color", e.placeholderColor);
                        }
                        return false;
                    });
                }

                // 按键事件
                a(f.fake_input).bind("keypress", f, function(b) {
                    // 回车或分隔符键添加标签
                    if (b.which == b.data.delimiter.charCodeAt(0) || b.which == 13) {
                        b.preventDefault();
                        if (b.data.minChars <= a(b.data.fake_input).val().length && (!b.data.maxChars || b.data.maxChars >= a(b.data.fake_input).val().length))
                            a(b.data.real_input).addTag(a(b.data.fake_input).val(), { focus: true, unique: e.unique });
                        a(b.data.fake_input).resetAutosize(e);
                        return false;
                    } else if (b.data.autosize) {
                        a(b.data.fake_input).doAutosize(e);
                    }
                });

                // 退格键删除标签
                f.removeWithBackspace && a(f.fake_input).bind("keydown", function(b) {
                    if (b.keyCode == 8 && a(this).val() == "") {
                        b.preventDefault();
                        var c = a(this).closest(".tagsinput").find(".tag:last").text();
                        var d = a(this).attr("id").replace(/_tag$/, "");
                        c = c.replace(/[\s]+x$/, "");
                        a("#" + d).removeTag(escape(c));
                        a(this).trigger("focus");
                    }
                });

                a(f.fake_input).blur();

                // 唯一性验证
                if (f.unique) {
                    a(f.fake_input).keydown(function(b) {
                        if (b.keyCode == 8 || String.fromCharCode(b.which).match(/\w+|[áéíóúÁÉÍÓÚñÑ,/]+/)) {
                            a(this).removeClass("not_valid");
                        }
                    });
                }
            }
        });
        return this;
    };

    // 更新标签字段值
    a.fn.tagsInput.updateTagsField = function(c, d) {
        var e = a(c).attr("id");
        a(c).val(d.join(b[e]));
    };

    // 导入标签到字段
    a.fn.tagsInput.importTags = function(d, e) {
        a(d).val("");
        var f = a(d).attr("id");
        var g = e.split(b[f]); // 按分隔符分割

        // 逐个添加标签
        for (i = 0; i < g.length; i++) {
            a(d).addTag(g[i], { focus: false, callback: false });
        }

        // 触发变化回调
        if (c[f] && c[f]["onChange"]) {
            var h = c[f]["onChange"];
            h.call(d, d, g[i]);
        }
    };
})(jQuery);